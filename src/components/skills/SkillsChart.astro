---
import I18nKey from "../../i18n/i18nKey";
import { i18n } from "../../i18n/translation";

// 计算SVG扇形路径数据的函数
const calculatePathData = (segment) => {
	if (segment.angle <= 0) return "";

	// 计算路径数据
	const radius = 40;
	const centerX = 50;
	const centerY = 50;

	// 起始点
	const startAngleRad = ((segment.startAngle - 90) * Math.PI) / 180;
	const startX = centerX + radius * Math.cos(startAngleRad);
	const startY = centerY + radius * Math.sin(startAngleRad);

	// 结束点
	const endAngleRad = ((segment.endAngle - 90) * Math.PI) / 180;
	const endX = centerX + radius * Math.cos(endAngleRad);
	const endY = centerY + radius * Math.sin(endAngleRad);

	// 大弧标志
	const largeArcFlag = segment.angle > 180 ? 1 : 0;

	// 路径数据
	return [
		`M ${centerX} ${centerY}`,
		`L ${startX} ${startY}`,
		`A ${radius} ${radius} 0 ${largeArcFlag} 1 ${endX} ${endY}`,
		"Z",
	].join(" ");
};

interface Props {
	stats: {
		total: number;
		byLevel: {
			beginner: number;
			intermediate: number;
			advanced: number;
			expert: number;
		};
		byCategory: {
			frontend: number;
			backend: number;
			database: number;
			tools: number;
			other: number;
		};
	};
	totalExperience: {
		years: number;
		months: number;
	};
}

const { stats, totalExperience } = Astro.props;

// 颜色配置
const levelColors = {
	expert: "#EF4444", // red-500
	advanced: "#F97316", // orange-500
	intermediate: "#EAB308", // yellow-500
	beginner: "#22C55E", // green-500
};

const categoryColors = {
	frontend: "#3B82F6", // blue-500
	backend: "#8B5CF6", // violet-500
	database: "#10B981", // emerald-500
	tools: "#F59E0B", // amber-500
	other: "#EC4899", // pink-500
};

// 计算扇形图数据（按技能等级）
const levelData = [
	{
		name: i18n(I18nKey.skillLevelExpert),
		value: stats.byLevel.expert,
		color: levelColors.expert,
	},
	{
		name: i18n(I18nKey.skillLevelAdvanced),
		value: stats.byLevel.advanced,
		color: levelColors.advanced,
	},
	{
		name: i18n(I18nKey.skillLevelIntermediate),
		value: stats.byLevel.intermediate,
		color: levelColors.intermediate,
	},
	{
		name: i18n(I18nKey.skillLevelBeginner),
		value: stats.byLevel.beginner,
		color: levelColors.beginner,
	},
];

// 计算矩形图数据（按技能分类）
const categoryData = [
	{
		name: i18n(I18nKey.skillsFrontend),
		value: stats.byCategory.frontend,
		color: categoryColors.frontend,
	},
	{
		name: i18n(I18nKey.skillsBackend),
		value: stats.byCategory.backend,
		color: categoryColors.backend,
	},
	{
		name: i18n(I18nKey.skillsDatabase),
		value: stats.byCategory.database,
		color: categoryColors.database,
	},
	{
		name: i18n(I18nKey.skillsTools),
		value: stats.byCategory.tools,
		color: categoryColors.tools,
	},
	{
		name: i18n(I18nKey.skillsOther),
		value: stats.byCategory.other,
		color: categoryColors.other,
	},
];

// 计算扇形图角度
const totalLevel = levelData.reduce((sum, item) => sum + item.value, 0);
let currentAngle = 0;
const levelSegments = levelData.map((item) => {
	const angle = totalLevel > 0 ? (item.value / totalLevel) * 360 : 0;
	const startAngle = currentAngle;
	currentAngle += angle;
	return {
		...item,
		startAngle,
		endAngle: currentAngle,
		angle,
	};
});

// 计算矩形图最大值用于比例计算
const maxCategory = Math.max(...categoryData.map((item) => item.value), 1);

// 计算百分比用于显示
const calculatePercentage = (value: number, total: number) => {
	return total > 0 ? Math.round((value / total) * 100) : 0;
};
---

<div class="grid grid-cols-1 lg:grid-cols-2 gap-6 mb-8">
  <!-- 扇形图 -->
  <div class="bg-white dark:bg-transparent rounded-xl border border-black/10 dark:border-white/10 p-6 shadow-sm hover:shadow-lg transition-shadow duration-300">
    <h3 class="text-xl font-bold text-black/90 dark:text-white/90 mb-6 flex items-center">
      <span class="w-3 h-3 rounded-full bg-blue-500 mr-2"></span>
      {i18n(I18nKey.skillsByLevel)}
    </h3>
    <div class="flex flex-col items-center">
      <div class="relative w-64 h-64">
        {
          totalLevel > 0 ? (
            <svg viewBox="0 0 100 100" class="w-full h-full">
              <defs>
                <!-- 为每个技能等级定义更协调的径向渐变 -->
                <radialGradient id="expert-gradient" cx="50%" cy="50%" r="70%">
                  <stop offset="0%" stop-color="#FECACA" />
                  <stop offset="100%" stop-color="#EF4444" />
                </radialGradient>
                <radialGradient id="advanced-gradient" cx="50%" cy="50%" r="70%">
                  <stop offset="0%" stop-color="#FED7AA" />
                  <stop offset="100%" stop-color="#F97316" />
                </radialGradient>
                <radialGradient id="intermediate-gradient" cx="50%" cy="50%" r="70%">
                  <stop offset="0%" stop-color="#FEF08A" />
                  <stop offset="100%" stop-color="#EAB308" />
                </radialGradient>
                <radialGradient id="beginner-gradient" cx="50%" cy="50%" r="70%">
                  <stop offset="0%" stop-color="#BBF7D0" />
                  <stop offset="100%" stop-color="#22C55E" />
                </radialGradient>
              </defs>
              {levelSegments.map((segment, index) => {
                const pathData = calculatePathData(segment);
                if (!pathData) return null;
                
                // 根据技能等级选择对应的渐变
                let gradientId = "";
                if (segment.name === i18n(I18nKey.skillLevelExpert)) {
                  gradientId = "expert-gradient";
                } else if (segment.name === i18n(I18nKey.skillLevelAdvanced)) {
                  gradientId = "advanced-gradient";
                } else if (segment.name === i18n(I18nKey.skillLevelIntermediate)) {
                  gradientId = "intermediate-gradient";
                } else if (segment.name === i18n(I18nKey.skillLevelBeginner)) {
                  gradientId = "beginner-gradient";
                }
                
                return (
                  <path
                    data-key={index}
                    d={pathData}
                    fill={`url(#${gradientId})`}
                    class="transition-all duration-300 hover:opacity-90"
                  />
                );
              })}
              <!-- 中心圆 -->
              <circle cx="50" cy="50" r="18" fill="white" class="dark:fill-gray-800" />
            </svg>
          ) : (
            <div class="w-full h-full flex items-center justify-center">
              <div class="text-gray-400 dark:text-gray-500">
                {i18n(I18nKey.noData)}
              </div>
            </div>
          )
        }
      </div>
      
      <!-- 图例 -->
      <div class="mt-6 grid grid-cols-2 gap-3 w-full max-w-xs">
        {levelData.map((item, index) => {
          const percentage = calculatePercentage(item.value, totalLevel);
          return (
            <div data-key={index} class="flex items-center justify-between p-2 rounded-lg hover:bg-gray-100 dark:hover:bg-gray-700/50 transition-colors">
              <div class="flex items-center">
                <div class="w-3 h-3 rounded-full mr-2" style={`background-color: ${item.color}`}></div>
                <span class="text-sm text-black/70 dark:text-white/70">
                  {item.name}
                </span>
              </div>
              <div class="flex items-center">
                <span class="text-sm font-medium text-black/90 dark:text-white/90 mr-1">
                  {item.value}
                </span>
                <span class="text-xs text-black/50 dark:text-white/50">
                  {percentage}%
                </span>
              </div>
            </div>
          );
        })}
      </div>
    </div>
  </div>
  
  <!-- 矩形图和统计数据 -->
  <div class="bg-white dark:bg-transparent rounded-xl border border-black/10 dark:border-white/10 p-6 shadow-sm hover:shadow-lg transition-shadow duration-300">
    <h3 class="text-xl font-bold text-black/90 dark:text-white/90 mb-6 flex items-center">
      <span class="w-3 h-3 rounded-full bg-purple-500 mr-2"></span>
      {i18n(I18nKey.skillsByCategory)}
    </h3>
    <div class="space-y-5">
      {categoryData.map((item, index) => {
        const percentage = maxCategory > 0 ? (item.value / maxCategory) * 100 : 0;
        const actualPercentage = calculatePercentage(item.value, stats.total);
        return (
          <div data-key={index}>
            <div class="flex justify-between text-sm mb-2">
              <div class="flex items-center">
                <span class="text-black/90 dark:text-white/90 font-medium">{item.name}</span>
                <span class="ml-2 text-xs px-2 py-0.5 rounded-full bg-gray-100 dark:bg-gray-700 text-black/60 dark:text-white/60">
                  {item.value}
                </span>
              </div>
              <span class="text-black/70 dark:text-white/70 font-medium">{actualPercentage}%</span>
            </div>
            <div class="w-full bg-gray-200 dark:bg-gray-700 rounded-full h-3">
              <div 
                class="h-3 rounded-full category-progress-bar-animate"
                style={`width: 0%; background-color: ${item.color};`}
                data-final-width={`${percentage}%`}
              ></div>
            </div>
          </div>
        );
      })}
      
      <!-- 总经验统计 -->
      <div class="pt-5 mt-5 border-t border-black/10 dark:border-white/10">
        <div class="grid grid-cols-2 gap-4">
          <div class="bg-gradient-to-r from-blue-50 to-purple-50 dark:from-blue-900/30 dark:to-purple-900/30 rounded-lg p-4">
            <div class="text-sm text-black/60 dark:text-white/60 mb-1">
              {i18n(I18nKey.skillExperience)}
            </div>
            <div class="text-2xl font-bold text-blue-600 dark:text-blue-400">
              {totalExperience.years}<span class="text-lg">.{totalExperience.months.toString().padStart(2, '0')}</span>
            </div>
            <div class="text-xs text-black/50 dark:text-white/50 mt-1">
              {i18n(I18nKey.skillYears)}
            </div>
          </div>
          
          <div class="bg-gradient-to-r from-green-50 to-teal-50 dark:from-green-900/30 dark:to-teal-900/30 rounded-lg p-4">
            <div class="text-sm text-black/60 dark:text-white/60 mb-1">
              {i18n(I18nKey.skillsTotal)}
            </div>
            <div class="text-2xl font-bold text-green-600 dark:text-green-400">
              {stats.total}
            </div>
            <div class="text-xs text-black/50 dark:text-white/50 mt-1">
              {i18n(I18nKey.skills)}
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
</div>

<!-- 添加CSS样式 -->
<style>
  .skill-progress-bar-animate {
    animation: skillProgressBarLoad 1s ease-out forwards;
  }
  
  .category-progress-bar-animate {
    animation: skillProgressBarLoad 1s ease-out forwards;
  }
  
  @keyframes skillProgressBarLoad {
    from {
      width: 0%;
    }
    to {
      width: var(--final-width);
    }
  }
</style>

<!-- 添加脚本触发动画 -->
<script>
  document.addEventListener('DOMContentLoaded', function() {
    // 使用Intersection Observer确保元素可见时才触发动画
    const observer = new IntersectionObserver((entries) => {
      entries.forEach(entry => {
        if (entry.isIntersecting) {
          const bar = entry.target;
          const finalWidth = bar.getAttribute('data-final-width');
          if (finalWidth) {
            bar.style.setProperty('--final-width', finalWidth);
            bar.classList.add('category-progress-bar-animate');
          }
          observer.unobserve(bar);
        }
      });
    }, {
      threshold: 0.1 // 当元素10%可见时触发
    });
    
    // 延迟观察所有进度条元素，确保它们已正确渲染
    setTimeout(() => {
      const progressBars = document.querySelectorAll('.category-progress-bar-animate');
      progressBars.forEach(bar => {
        observer.observe(bar);
      });
    }, 100);
  });
</script>