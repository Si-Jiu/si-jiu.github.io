---
import { siteConfig } from "../config";
import Icon from "../components/misc/Icon.astro";
import IconifyLoader from "../components/misc/IconifyLoader.astro";
import SkillsChart from "../components/skills/SkillsChart.astro";
import { UNCATEGORIZED } from "../constants/constants";
import {
	getAdvancedSkills,
	getSkillStats,
	getSkillsByCategory,
	getTotalExperience,
	skillsData,
} from "../data/skills";
import I18nKey from "../i18n/i18nKey";
import { i18n } from "../i18n/translation";
import MainGridLayout from "../layouts/MainGridLayout.astro";

// 检查技能页面是否启用
if (!siteConfig.featurePages.skills) {
	return Astro.redirect("/404/");
}

const { lang } = Astro.props;

// 获取技能统计信息
const stats = getSkillStats();
const advancedSkills = getAdvancedSkills();
const totalExperience = getTotalExperience();

// 获取所有分类
const categories = [...new Set(skillsData.map((skill) => skill.category))];

// 按分类获取技能
const skillsByCategory = categories.reduce(
	(acc, category) => {
		acc[category] = getSkillsByCategory(category);
		return acc;
	},
	{} as Record<string, typeof skillsData>,
);

// 技能等级颜色映射
const getLevelColor = (level: string) => {
	switch (level) {
		case "expert":
			return "bg-red-100 text-red-700 dark:bg-red-900/30 dark:text-red-400";
		case "advanced":
			return "bg-orange-100 text-orange-700 dark:bg-orange-900/30 dark:text-orange-400";
		case "intermediate":
			return "bg-yellow-100 text-yellow-700 dark:bg-yellow-900/30 dark:text-yellow-400";
		case "beginner":
			return "bg-green-100 text-green-700 dark:bg-green-900/30 dark:text-green-400";
		default:
			return "bg-gray-100 text-gray-700 dark:bg-gray-900/30 dark:text-gray-400";
	}
};

// 技能等级进度条宽度
const getLevelWidth = (level: string) => {
	switch (level) {
		case "expert":
			return "100%";
		case "advanced":
			return "80%";
		case "intermediate":
			return "60%";
		case "beginner":
			return "40%";
		default:
			return "20%";
	}
};

// 获取分类的翻译文本
const getCategoryText = (category: string) => {
	switch (category) {
		case "frontend":
			return i18n(I18nKey.skillsFrontend);
		case "backend":
			return i18n(I18nKey.skillsBackend);
		case "database":
			return i18n(I18nKey.skillsDatabase);
		case "tools":
			return i18n(I18nKey.skillsTools);
		case "other":
			return i18n(I18nKey.skillsOther);
		case UNCATEGORIZED:
			return i18n(I18nKey.uncategorized);
		default:
			return category;
	}
};

const title = i18n(I18nKey.skills);
const subtitle = i18n(I18nKey.skillsSubtitle);

// 收集所有技能图标用于预加载
const allIcons = skillsData.map((skill) => skill.icon).filter(Boolean);

// 进度条动画状态
let animated = false;
---

<MainGridLayout title={title} description={subtitle}>
  <!-- 图标加载器，预加载所有技能图标 -->
  <IconifyLoader preloadIcons={allIcons} />
  <div class="flex w-full rounded-[var(--radius-large)] overflow-hidden relative min-h-32">
    <div class="card-base z-10 px-9 py-6 relative w-full">
      <!-- 页面标题 -->
      <div class="flex flex-col items-start justify-center mb-8">
        <h1 class="text-4xl font-bold text-black/90 dark:text-white/90 mb-2 relative
                  before:w-1 before:h-8 before:rounded-md before:bg-[var(--primary)]
                  before:absolute before:top-1/2 before:-translate-y-1/2 before:-left-4">
          {i18n(I18nKey.skills)}
        </h1>
        <p class="text-lg text-black/60 dark:text-white/60">
          {i18n(I18nKey.skillsSubtitle)}
        </p>
      </div>

      <!-- 技能图表 -->
      <SkillsChart stats={stats} totalExperience={totalExperience} />

      <!-- 专业技能 -->
      {advancedSkills.length > 0 && (
        <div class="mb-8">
          <h2 class="text-2xl font-bold text-black/90 dark:text-white/90 mb-4 relative
                    before:w-1 before:h-6 before:rounded-md before:bg-[var(--primary)]
                    before:absolute before:top-1/2 before:-translate-y-1/2 before:-left-4">
            {i18n(I18nKey.skillsAdvancedTitle)}
          </h2>
          <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
            {advancedSkills.map((skill) => (
              <div class="bg-white dark:bg-transparent rounded-lg border border-black/10 dark:border-white/10 p-6 hover:shadow-lg transition-shadow duration-300">
                <div class="flex items-start gap-4">
                  {skill.icon && (
                    <div class="w-12 h-12 rounded-lg flex items-center justify-center" style={`background-color: ${skill.color || 'rgb(99 102 241)'}20`}>
                      <Icon 
                        icon={skill.icon} 
                        class="text-2xl" 
                        color={skill.color && skill.color !== '#000000' ? skill.color : 'rgb(99 102 241)'}
                        fallback={skill.name.charAt(0)}
                        loading="eager"
                      />
                    </div>
                  )}
                  <div class="flex-1">
                    <div class="flex items-center justify-between mb-2">
                      <h3 class="text-xl font-semibold text-black/90 dark:text-white/90">
                        {skill.name}
                      </h3>
                      <span class={`px-2 py-1 text-xs rounded-full ${getLevelColor(skill.level)}`}>
                        {i18n(skill.level === 'expert' ? I18nKey.skillsExpert :
                              skill.level === 'advanced' ? I18nKey.skillsAdvanced :
                              skill.level === 'intermediate' ? I18nKey.skillsIntermediate :
                              I18nKey.skillsBeginner)}
                      </span>
                    </div>
                    <p class="text-black/60 dark:text-white/60 mb-3 text-sm">
                      {skill.description}
                    </p>
                    <div class="mb-3">
                      <div class="flex justify-between text-sm mb-1">
                        <span class="text-black/60 dark:text-white/60">{i18n(I18nKey.skillExperience)}</span>
                        <span class="text-black/80 dark:text-white/80">
                          {skill.experience.years}{i18n(I18nKey.skillYears)}{skill.experience.months > 0 ? ` ${skill.experience.months}${i18n(I18nKey.skillMonths)}` : ''}
                        </span>
                      </div>
                      <div class="w-full bg-gray-200 dark:bg-gray-700 rounded-full h-2">
                        <div 
                            class="h-2 rounded-full skill-progress-bar-animate"
                            style={`width: 0%; background-color: ${skill.color || 'rgb(99 102 241)'};`}
                            data-final-width={getLevelWidth(skill.level)}
                          ></div>
                      </div>
                    </div>
                    {skill.certifications && skill.certifications.length > 0 && (
                      <div class="flex flex-wrap gap-1">
                        {skill.certifications.map((cert) => (
                          <span class="px-2 py-1 text-xs bg-green-100 text-green-700 dark:bg-green-900/30 dark:text-green-400 rounded">
                            {cert}
                          </span>
                        ))}
                      </div>
                    )}
                  </div>
                </div>
              </div>
            ))}
          </div>
        </div>
      )}

      <!-- 按分类展示技能 -->
      <div class="space-y-8">
        {categories.map((category) => {
          const categorySkills = skillsByCategory[category];
          if (categorySkills.length === 0) return null;
          
          return (
            <div>
              <h2 class="text-2xl font-bold text-black/90 dark:text-white/90 mb-4 relative
                        before:w-1 before:h-6 before:rounded-md before:bg-[var(--primary)]
                        before:absolute before:top-1/2 before:-translate-y-1/2 before:-left-4">
                {getCategoryText(category)}
                <span class="text-lg font-normal text-black/60 dark:text-white/60 ml-2">
                  ({categorySkills.length})
                </span>
              </h2>
              <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
                {categorySkills.map((skill) => (
                  <div class="bg-white dark:bg-transparent rounded-lg border border-black/10 dark:border-white/10 p-4 hover:shadow-lg transition-shadow duration-300">
                    <div class="flex items-start gap-3">
                      {skill.icon && (
                        <div class="w-10 h-10 rounded-lg flex items-center justify-center shrink-0" style={`background-color: ${skill.color || 'rgb(99 102 241)'}20`}>
                          <Icon 
                            icon={skill.icon} 
                            class="text-lg" 
                            color={skill.color && skill.color !== '#000000' ? skill.color : 'rgb(99 102 241)'}
                            fallback={skill.name.charAt(0)}
                            loading="eager"
                          />
                        </div>
                      )}
                      <div class="flex-1 min-w-0">
                        <div class="flex items-center justify-between mb-1">
                          <h3 class="text-lg font-semibold text-black/90 dark:text-white/90 truncate">
                            {skill.name}
                          </h3>
                          <span class={`px-2 py-1 text-xs rounded-full shrink-0 ml-2 ${getLevelColor(skill.level)}`}>
                            {i18n(skill.level === 'expert' ? I18nKey.skillsExpert :
                                  skill.level === 'advanced' ? I18nKey.skillsAdvanced :
                                  skill.level === 'intermediate' ? I18nKey.skillsIntermediate :
                                  I18nKey.skillsBeginner)}
                          </span>
                        </div>
                        <p class="text-black/60 dark:text-white/60 mb-2 text-sm line-clamp-2">
                          {skill.description}
                        </p>
                        <div class="flex justify-between text-xs text-black/60 dark:text-white/60">
                          <span>
                            {skill.experience.years}{i18n(I18nKey.skillYears)}{skill.experience.months > 0 ? ` ${skill.experience.months}${i18n(I18nKey.skillMonths)}` : ''}
                          </span>
                          {skill.projects && skill.projects.length > 0 && (
                            <span>
                              {skill.projects.length} {skill.projects.length > 1 ? i18n(I18nKey.projects) : i18n(I18nKey.project)}
                            </span>
                          )}
                        </div>
                        <div class="w-full bg-gray-200 dark:bg-gray-700 rounded-full h-2 mt-2">
                          <div 
                              class="h-2 rounded-full skill-progress-bar-animate"
                              style={`width: 0%; background-color: ${skill.color || 'rgb(99 102 241)'};`}
                              data-final-width={getLevelWidth(skill.level)}
                            ></div>
                        </div>
                      </div>
                    </div>
                  </div>
                ))}
              </div>
            </div>
          );
        })}
      </div>
    </div>
  </div>
  
  <!-- 添加CSS样式 -->
  <style>
    .skill-progress-bar-animate {
      animation: skillProgressBarLoad 1s ease-out forwards;
    }
    
    .category-progress-bar-animate {
      animation: skillProgressBarLoad 1s ease-out forwards;
    }
    
    @keyframes skillProgressBarLoad {
      from {
        width: 0%;
      }
      to {
        width: var(--final-width);
      }
    }
  </style>

  <!-- 添加脚本触发动画 -->
  <!-- 注意：此脚本已被移至全局处理脚本 /public/js/skills-progress-handler.js 中 -->
  <!-- 在 Layout.astro 中引入了该脚本以确保在各种导航场景下都能正确触发动画 -->
</MainGridLayout>