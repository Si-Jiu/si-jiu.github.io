---
import ImageWrapper from "../components/misc/ImageWrapper.astro";
import { siteConfig, siteConfig } from "../config";
import localAnimeList from "../data/anime";
import I18nKey from "../i18n/i18nKey";
import { i18n } from "../i18n/translation";
import MainGridLayout from "../layouts/MainGridLayout.astro";

// 检查番剧页面是否启用
if (!siteConfig.featurePages.anime) {
	return Astro.redirect("/404/");
}

// 检查番剧页面是否启用
if (!siteConfig.featurePages.anime) {
	return Astro.redirect("/404/");
}

// Bangumi API配置
const BANGUMI_USER_ID = siteConfig.bangumi?.userId || "your-user-id"; // 用户ID
const BANGUMI_API_BASE = "https://api.bgm.tv";

// 获取番剧数据模式(不需要更改，请在主配置src/config.ts中修改)
const ANIME_MODE = siteConfig.anime?.mode || "bangumi";

// 获取单个条目相关人员信息
async function fetchSubjectPersons(subjectId: number) {
	try {
		const response = await fetch(
			`${BANGUMI_API_BASE}/v0/subjects/${subjectId}/persons`,
		);
		const data = await response.json();
		return Array.isArray(data) ? data : [];
	} catch (error) {
		console.error(`Error fetching subject ${subjectId} persons:`, error);
		return [];
	}
}

// 获取Bangumi收藏列表
async function fetchBangumiCollection(
	userId: string,
	subjectType: number,
	type: number,
) {
	try {
		let allData: any[] = [];
		let offset = 0;
		const limit = 50; // 每页获取的数量
		let hasMore = true;

		// 循环获取所有数据
		while (hasMore) {
			const response = await fetch(
				`${BANGUMI_API_BASE}/v0/users/${userId}/collections?subject_type=${subjectType}&type=${type}&limit=${limit}&offset=${offset}`,
			);
			if (!response.ok) {
				throw new Error(`Bangumi API error: ${response.status}`);
			}
			const data = await response.json();

			// 添加当前页数据到总数据中
			if (data.data && data.data.length > 0) {
				allData = [...allData, ...data.data];
			}
			if (!data.data || data.data.length < limit) {
				hasMore = false;
			} else {
				offset += limit;
			}
			// 防止请求过于频繁
			await new Promise((resolve) => setTimeout(resolve, 100));
		}
		return { data: allData };
	} catch (error) {
		console.error("Error fetching Bangumi data:", error);
		return null;
	}
}

// 获取Bangumi数据转换为页面所需格式
async function processBangumiData(data: any, status: string) {
	if (!data || !data.data) return [];

	// 为每个条目获取详细信息
	const detailedItems = await Promise.all(
		data.data.map(async (item: any) => {
			// 获取相关人员信息
			const subjectPersons = await fetchSubjectPersons(item.subject_id);
			// 获取年份信息
			const year = item.subject?.date || "Unknown";
			// 获取评分
			const rating = item.rate ? Number.parseFloat(item.rate.toFixed(1)) : 0;
			// 获取进度信息
			const progress = item.ep_status || 0;
			const totalEpisodes = item.subject?.eps || progress;
			// 从相关人员中获取制作方信息
			let studio = "Unknown";
			if (Array.isArray(subjectPersons)) {
				// 定义筛选优先级顺序
				const priorities = ["动画制作", "製作", "制作"];
				for (const relation of priorities) {
					const match = subjectPersons.find(
						(person) => person.relation === relation,
					);
					if (match?.name) {
						studio = match.name;
						break;
					}
				}
			}

			return {
				title: item.subject?.name_cn || item.subject?.name || "Unknown Title",
				status: status,
				rating: rating,
				cover: item.subject?.images?.medium || "/assets/anime/default.webp",
				description: (
					item.subject?.short_summary ||
					item.subject?.name_cn ||
					""
				).trimStart(),
				episodes: `${totalEpisodes} episodes`,
				year: year,
				genre: item.subject?.tags
					? item.subject.tags.slice(0, 3).map((tag: any) => tag.name)
					: ["Unknown"],
				studio: studio,
				link: `https://bgm.tv/subject/${item.subject.id}` || "#",
				progress: progress,
				totalEpisodes: totalEpisodes,
				startDate: item.subject?.date || "",
				endDate: item.subject?.date || "",
			};
		}),
	);
	return detailedItems;
}

// 根据模式获取番剧列表
let animeList = [];
if (ANIME_MODE === "local") {
	// 使用本地配置
	animeList = localAnimeList;
} else {
	// 使用Bangumi API（默认模式）
	// 获取与处理在看列表（type=3）看过列表（type=2）
	const watchingData = await fetchBangumiCollection(BANGUMI_USER_ID, 2, 3);
	const completedData = await fetchBangumiCollection(BANGUMI_USER_ID, 2, 2);

	const watchingList = watchingData
		? await processBangumiData(watchingData, "watching")
		: [];
	const completedList = completedData
		? await processBangumiData(completedData, "completed")
		: [];

	animeList = [...watchingList, ...completedList];
}

// 获取状态的翻译文本和样式
function getStatusInfo(status: string) {
	switch (status) {
		case "watching":
			return {
				text: i18n(I18nKey.animeStatusWatching),
				class:
					"bg-green-100 text-green-700 dark:bg-green-900/30 dark:text-green-300",
				icon: "▶",
			};
		case "completed":
			return {
				text: i18n(I18nKey.animeStatusCompleted),
				class:
					"bg-blue-100 text-blue-700 dark:bg-blue-900/30 dark:text-blue-300",
				icon: "✓",
			};
		case "planned":
			return {
				text: i18n(I18nKey.animeStatusPlanned),
				class:
					"bg-amber-100 text-amber-700 dark:bg-amber-900/30 dark:text-amber-300",
				icon: "⏰",
			};
		default:
			return {
				text: status,
				class: "bg-gray-100 text-gray-700 dark:bg-gray-800 dark:text-gray-300",
				icon: "?",
			};
	}
}

// 计算统计数据
const stats = {
	total: animeList.length,
	watching: animeList.filter((anime) => anime.status === "watching").length,
	completed: animeList.filter((anime) => anime.status === "completed").length,
	avgRating: (() => {
		const ratedAnime = animeList.filter((anime) => anime.rating > 0);
		if (ratedAnime.length === 0) return "0.0";
		return (
			ratedAnime.reduce((sum, anime) => sum + anime.rating, 0) /
			ratedAnime.length
		).toFixed(1);
	})(),
};
---

<MainGridLayout title={i18n(I18nKey.anime)} description={i18n(I18nKey.animeSubtitle)}>
  <div class="flex w-full rounded-[var(--radius-large)] overflow-hidden relative min-h-32">
    <div class="card-base z-10 px-9 py-6 relative w-full">
      <!-- 页面标题 -->
      <div class="relative w-full mb-8">
        <div class="mb-6">
          <h1 class="text-4xl font-bold text-black/90 dark:text-white/90 mb-2 relative
                    before:w-1 before:h-8 before:rounded-md before:bg-[var(--primary)]
                    before:absolute before:top-1/2 before:-translate-y-1/2 before:-left-4">
            {i18n(I18nKey.animeTitle)}
          </h1>
          <p class="text-black/75 dark:text-white/75">{i18n(I18nKey.animeSubtitle)}</p>
        </div>
        
        <!-- 过滤按钮 - 参考Firefly设计 -->
        <div class="mb-6">
          <div class="filter-container flex flex-wrap gap-2">
            <button class="filter-tag active" data-status="all">{i18n(I18nKey.animeFilterAll)}</button>
            <button class="filter-tag" data-status="watching">{i18n(I18nKey.animeStatusWatching)}</button>
            <button class="filter-tag" data-status="completed">{i18n(I18nKey.animeStatusCompleted)}</button>
            <button class="filter-tag" data-status="planned">{i18n(I18nKey.animeStatusPlanned)}</button>
            {ANIME_MODE === 'bangumi' && (
              <>
                <button class="filter-tag" data-status="onhold">{i18n(I18nKey.animeStatusOnHold)}</button>
                <button class="filter-tag" data-status="dropped">{i18n(I18nKey.animeStatusDropped)}</button>
              </>
            )}
          </div>
        </div>
      </div>

      <!-- 动漫列表 -->
      <div class="mb-8">
        
        {ANIME_MODE !== 'local' && BANGUMI_USER_ID === 'your-user-id' ? (
          <div class="text-center py-12">
            <div class="text-5xl mb-4">😢</div>
            <h3 class="text-xl font-medium text-black/80 dark:text-white/80 mb-2">
              {i18n(I18nKey.animeEmpty)}
            </h3>
            <p class="text-black/60 dark:text-white/60">
              请在 src/config.ts 文件中设置你的 Bangumi 用户ID
            </p>
          </div>
        ) : animeList.length > 0 ? (
          <div class="grid grid-cols-2 md:grid-cols-3 lg:grid-cols-4 xl:grid-cols-5 gap-4 md:gap-6">
            {animeList.map(anime => {
              const statusInfo = getStatusInfo(anime.status);
              const progressPercent = anime.totalEpisodes > 0 ? (anime.progress / anime.totalEpisodes) * 100 : 0;
              
              return (
                <div class="group relative bg-[var(--card-bg)] border border-[var(--line-divider)] rounded-[var(--radius-large)] overflow-hidden transition-all duration-300 hover:shadow-lg hover:scale-[1.02]" data-anime-status={anime.status}>
                  <!-- 封面区域 - 竖屏比例 -->
                  <div class="relative aspect-[2/3] overflow-hidden">
                    <a href={anime.link} target="_blank" rel="noopener noreferrer" class="block w-full h-full">
                      <ImageWrapper 
                        src={anime.cover} 
                        alt={anime.title}
                        class="w-full h-full object-cover transition-transform duration-300 group-hover:scale-110"
                      />
                      <div class="absolute inset-0 bg-gradient-to-t from-black/60 via-transparent to-transparent opacity-0 group-hover:opacity-100 transition-opacity duration-300">
                        <div class="absolute inset-0 flex items-center justify-center">
                          <div class="w-12 h-12 rounded-full bg-white/90 flex items-center justify-center">
                            <svg class="w-6 h-6 text-gray-800 ml-1" fill="currentColor" viewBox="0 0 24 24">
                              <path d="M8 5v14l11-7z"/>
                            </svg>
                          </div>
                        </div>
                      </div>
                    </a>
                    
                    <!-- 状态标签 -->
                    <div class={`absolute top-2 left-2 px-2 py-1 rounded-md text-xs font-medium ${statusInfo.class}`}>
                      <span class="mr-1">{statusInfo.icon}</span>
                      <span>{statusInfo.text}</span>
                    </div>
                    
                    <!-- 评分 -->
                    <div class="absolute top-2 right-2 bg-black/70 text-white px-2 py-1 rounded-md text-xs font-medium flex items-center gap-1">
                      <svg class="w-3 h-3 text-yellow-400" fill="currentColor" viewBox="0 0 20 20">
                        <path d="M9.049 2.927c.3-.921 1.603-.921 1.902 0l1.07 3.292a1 1 0 00.95.69h3.462c.969 0 1.371 1.24.588 1.81l-2.8 2.034a1 1 0 00-.364 1.118l1.07 3.292c.3.921-.755 1.688-1.54 1.118l-2.8-2.034a1 1 0 00-1.175 0l-2.8 2.034c-.784.57-1.838-.197-1.539-1.118l1.07-3.292a1 1 0 00-.364-1.118L2.98 8.72c-.783-.57-.38-1.81.588-1.81h3.461a1 1 0 00.951-.69l1.07-3.292z"/>
                      </svg>
                      <span>{anime.rating}</span>
                    </div>
                    
                    <!-- 进度条 - 在封面底部 -->
                    {anime.status === 'watching' && (
                      <div class="absolute bottom-0 left-0 right-0 bg-gradient-to-t from-black/80 to-transparent p-2">
                        <div class="w-full bg-white/20 rounded-full h-1.5 mb-1">
                          <div class="bg-gradient-to-r from-emerald-400 to-teal-400 h-1.5 rounded-full transition-all duration-300" style={`width: ${progressPercent}%`}></div>
                        </div>
                        <div class="text-white text-xs font-medium">
                          {anime.progress}/{anime.totalEpisodes} ({Math.round(progressPercent)}%)
                        </div>
                      </div>
                    )}
                  </div>
                  
                  <!-- 内容区域 - 紧凑设计 -->
                  <div class="p-3">
                    <h3 class="text-sm font-bold text-black/90 dark:text-white/90 mb-1 line-clamp-2 leading-tight">{anime.title}</h3>
                    <p class="text-black/60 dark:text-white/60 text-xs mb-2 line-clamp-2">{anime.description}</p>
                    
                    <!-- 详细信息 - 更紧凑 -->
                    <div class="space-y-1 text-xs">
                      <div class="flex justify-between">
                        <span class="text-black/50 dark:text-white/50">{i18n(I18nKey.animeYear)}</span>
                        <span class="text-black/70 dark:text-white/70">{anime.year}</span>
                      </div>
                      <div class="flex justify-between">
                        <span class="text-black/50 dark:text-white/50">{i18n(I18nKey.animeStudio)}</span>
                        <span class="text-black/70 dark:text-white/70 truncate ml-2">{anime.studio}</span>
                      </div>
                      <div class="flex flex-wrap gap-1 mt-2">
                        {anime.genre.map(g => (
                          <span class="px-1.5 py-0.5 bg-[var(--btn-regular-bg)] text-black/70 dark:text-white/70 rounded text-xs">{g}</span>
                        ))}
                      </div>
                    </div>
                  </div>
                </div>
              );
            })}
          </div>
        ) : (
          <div class="text-center py-12">
            <div class="text-5xl mb-4">😢</div>
            <h3 class="text-xl font-medium text-black/80 dark:text-white/80 mb-2">
              {i18n(I18nKey.animeEmpty)}
            </h3>
            <p class="text-black/60 dark:text-white/60">
              {ANIME_MODE === 'local' ? i18n(I18nKey.animeEmptyLocal) : i18n(I18nKey.animeEmptyBangumi)}
            </p>
          </div>
        )}
      </div>
    </div>
  </div>

  <!-- 过滤按钮样式 -->
  <style>
    .filter-container {
      display: flex;
      flex-wrap: wrap;
      gap: 0.5rem;
    }
    
    .filter-tag {
      padding: 0.5rem 1rem;
      border: 1px solid var(--line-divider);
      border-radius: var(--radius-large);
      background: var(--btn-regular-bg);
      color: var(--btn-content);
      font-size: 0.875rem;
      font-weight: 500;
      cursor: pointer;
      transition: all 0.2s ease;
      white-space: nowrap;
    }
    
    .filter-tag:hover:not(.active) {
      background: var(--btn-hover-bg);
      border-color: var(--primary);
      transform: translateY(-1px);
    }
    
    .filter-tag.active {
      background: var(--primary);
      color: white;
      border-color: var(--primary);
    }
    
    .filter-tag.active:hover {
      background: var(--primary) !important;
      color: white !important;
      border-color: var(--primary) !important;
      transform: translateY(-1px);
    }
    
    /* 隐藏动画 */
    .anime-item {
      transition: all 0.3s ease;
    }
    
    .anime-item.hidden {
      opacity: 0;
      transform: scale(0.95);
      pointer-events: none;
    }
  </style>

  <!-- 过滤功能脚本 -->
  <script is:inline>
    // 事件监听器存储，用于防止重复绑定
    let filterEventListeners = [];
    
    // 初始化过滤功能
    function initFilterButtons() {
      const filterTags = document.querySelectorAll('.filter-tag');
      
      // 移除之前的事件监听器
      filterEventListeners.forEach(listener => {
        const [element, type, handler] = listener;
        element.removeEventListener(type, handler);
      });
      filterEventListeners = [];
      
      // 过滤功能
      filterTags.forEach(tag => {
        const clickHandler = function() {
          // 移除所有active类
          filterTags.forEach(t => t.classList.remove('active'));
          // 添加active类到当前点击的标签
          this.classList.add('active');
          
          const status = this.getAttribute('data-status');
          
          // 获取所有动漫项
          const animeItems = document.querySelectorAll('[data-anime-status]');
          
          // 过滤动漫项
          animeItems.forEach(item => {
            if (status === 'all') {
              item.classList.remove('hidden');
            } else {
              const itemStatus = item.getAttribute('data-anime-status');
              if (itemStatus === status) {
                item.classList.remove('hidden');
              } else {
                item.classList.add('hidden');
              }
            }
          });
        };
        
        tag.addEventListener('click', clickHandler);
        filterEventListeners.push([tag, 'click', clickHandler]);
      });
      
      console.log('Filter buttons initialized with', filterTags.length, 'buttons');
    }
    
    // 页面加载时初始化
    document.addEventListener('DOMContentLoaded', initFilterButtons);
    
    // Swup页面切换后重新初始化
    function setupSwupListeners() {
      if (window.swup) {
        // 使用Swup hooks监听页面切换事件
        window.swup.hooks.on('content:replace', function() {
          console.log('Swup content replaced - reinitializing filter buttons');
          setTimeout(initFilterButtons, 150);
        });
        
        window.swup.hooks.on('page:view', function() {
          console.log('Swup page view - reinitializing filter buttons');
          setTimeout(initFilterButtons, 150);
        });
        
        window.swup.hooks.on('animation:in:end', function() {
          console.log('Swup animation ended - reinitializing filter buttons');
          setTimeout(initFilterButtons, 200);
        });
      }
    }
    
    // 初始化Swup监听器
    if (typeof window !== 'undefined') {
      if (window.swup) {
        setupSwupListeners();
      } else {
        // 如果Swup尚未初始化，监听启用事件
        document.addEventListener('swup:enable', function() {
          console.log('Swup enabled - setting up listeners');
          setupSwupListeners();
        });
      }
    }
  </script>
</MainGridLayout>